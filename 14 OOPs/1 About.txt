🟦 OBJECT-ORIENTED PROGRAMMING (OOPs) IN JAVA – DETAILED SUMMARY 🟦

1️⃣ CLASS:
🔹 A blueprint/template that defines attributes (variables) and behaviors (methods).
🔹 Doesn’t consume memory until an object is created.
🔸 Example:
    class Car {
        String color;
        void drive() {
            System.out.println("Driving...");
        }
    }

2️⃣ OBJECT:
🔹 A real-world entity created from a class.
🔹 It has its own state (data) and behavior (methods).
🔸 Example:
    Car c = new Car();

━━━━━━━━━━━━━━━━━━━━━━
🟨 FOUR PILLARS OF OOPs:
━━━━━━━━━━━━━━━━━━━━━━

3️⃣ ENCAPSULATION:
🔹 Wrapping data and methods into a single unit (class).
🔹 Helps in data hiding using `private` access modifier.
🔹 Access is provided via `getters` and `setters`.
🔸 Example:
    class Student {
        private int marks;
        public void setMarks(int m) { marks = m; }
        public int getMarks() { return marks; }
    }

4️⃣ INHERITANCE:
🔹 Mechanism where one class acquires properties of another.
🔹 Promotes reusability and method overriding.
🔸 Keywords: `extends`
🔸 Types: Single, Multilevel, Hierarchical
🔸 Example:
    class Animal { void eat() {} }
    class Dog extends Animal { void bark() {} }

5️⃣ POLYMORPHISM:
🔹 Ability to take many forms.
🔹 Types:
   ✅ Compile-Time (Method Overloading): Same method name, different parameters.
   ✅ Run-Time (Method Overriding): Same method name, same parameters, different classes.
🔸 Example (Overloading):
    int add(int a, int b) {...}
    double add(double a, double b) {...}
🔸 Example (Overriding):
    class A { void show() {} }
    class B extends A { void show() {} }

6️⃣ ABSTRACTION:
🔹 Hiding internal details and showing only the necessary functionality.
🔹 Achieved using:
   ✅ Abstract Class (`abstract class`)
   ✅ Interface (`interface`)
🔸 Abstract class can have both abstract & concrete methods.
🔸 Interface contains only abstract methods (Java 8+ allows default/static methods).
🔸 Example:
    abstract class Shape { abstract void draw(); }

━━━━━━━━━━━━━━━━━━━━━━
🟩 ADDITIONAL OOP CONCEPTS:
━━━━━━━━━━━━━━━━━━━━━━

7️⃣ INTERFACE:
🔹 A contract for classes to implement.
🔹 Used for full abstraction & multiple inheritance.
🔸 Syntax:
    interface Vehicle { void start(); }
    class Car implements Vehicle { public void start() {} }

8️⃣ CONSTRUCTOR:
🔹 Special method that runs when an object is created.
🔹 Same name as class, no return type.
🔸 Types: Default, Parameterized, Copy
🔸 Example:
    class Person {
        Person() {
            System.out.println("Constructor called");
        }
    }

9️⃣ THIS KEYWORD:
🔹 Refers to the current object.
🔹 Resolves naming conflicts between instance and local variables.
🔸 Example:
    class Test {
        int x;
        Test(int x) {
            this.x = x;
        }
    }

━━━━━━━━━━━━━━━━━━━━━━
✅ QUICK SUMMARY TABLE:
━━━━━━━━━━━━━━━━━━━━━━

| Concept        | Purpose / Role                          |
|----------------|------------------------------------------|
| Class          | Blueprint for creating objects           |
| Object         | Instance of class                        |
| Encapsulation  | Data hiding, controlled access           |
| Inheritance    | Code reuse via parent-child relation     |
| Polymorphism   | Same action in different forms           |
| Abstraction    | Hides complexity, shows essential info   |
| Interface      | Achieves multiple inheritance, abstraction |
| Constructor    | Initializes object during creation       |
| this keyword   | Refers to current object                 |

🟣 Java is purely object-oriented (except for primitives).
🟣 OOPs promotes code modularity, reusability, and maintainability.


.............................................................................................................


| Specifier   | Class | Package | Subclass (in another package) | global |
| ----------- | ----- | ------- | ----------------------------- | ----- |
| `public`    | ✅     | ✅       | ✅                         | ✅   |
| `protected` | ✅     | ✅       | ✅                         | ❌   |
| (default)   | ✅     | ✅       | ❌                         | ❌   |
| `private`   | ✅     | ❌       | ❌                         | ❌   |



.............................................................................................................
// 📦 Java Constructor – Theory Summary

// ➤ A constructor is a special method used to initialize objects in Java.
// ➤ It has the same name as the class and has no return type (not even void).
// ➤ It is called automatically when an object is created using the `new` keyword.
// ➤ Constructors can be overloaded (multiple constructors with different parameters).
// ➤ If no constructor is defined, Java provides a default constructor.
// ➤ Types of Constructors:
//    - Default Constructor: Takes no parameters.
//    - Parameterized Constructor: Takes arguments to initialize fields.
//    - Copy Constructor: Initializes an object using another object (created manually).
// ➤ The `this()` keyword can be used to call one constructor from another in the same class.
// ➤ Constructors are important for setting initial values and ensuring object readiness.



........................................................................................................................
| Feature      | Shallow Copy                       | Deep Copy                        |
| ------------ | ---------------------------------- | -------------------------------- |
| Memory       | Copies references                  | Copies actual objects/arrays     |
| Independence | Not independent (linked objects)   | Fully independent                |
| Performance  | Faster (less memory usage)         | Slower (more memory used)        |
| When to use  | When shared object state is needed | When full separation is required |


📦 Shallow Copy vs Deep Copy in Java

🔹 Shallow Copy:
- Copies only the references to objects.
- Original and copied objects share the same memory for referenced fields.
- Changes in one affect the other.
- Default `Object.clone()` does shallow copy.
- Suitable when shared access is acceptable.

🔹 Deep Copy:
- Copies all fields, including new copies of referenced objects.
- Original and copied objects are fully independent.
- Changes in one do NOT affect the other.
- Requires manual copying of nested objects/arrays.
- Suitable when isolation of objects is needed.



...................................................................................................................

// ❌ Does Java have destructors?
// No, Java does not have destructors like C++.

// ✅ Why not?
// // In Java, memory management is automatic. The Garbage Collector 
// //takes care of deleting objects that are no longer in use. Because of this, Java doesn’t need destructors like C++.

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


✅ Inheritance in Java – Simple Explanation:
Inheritance in Java is a mechanism where one class (child) can use the properties and methods of another class (parent).

It allows code reusability and represents a real-world "is-a" relationship.



.......................................................................................................................................
🔰 TYPES OF INHERITANCE IN JAVA 🔰

             [Single Inheritance]
                    ┌───────┐
                    │Animal│
                    └──┬────┘
                       │
                 ┌─────▼─────┐
                 │   Dog     │
                 └───────────┘
       (Dog inherits from Animal)

────────────────────────────────────────────

            [Multilevel Inheritance]
                    ┌───────┐
                    │Animal│
                    └──┬────┘
                       │
                 ┌─────▼─────┐
                 │   Dog     │
                 └──┬────────┘
                    │
              ┌─────▼──────┐
              │  Puppy     │
              └────────────┘
     (Puppy → Dog → Animal)

────────────────────────────────────────────

          [Hierarchical Inheritance]
                    ┌───────┐
                    │Animal│
                    └──┬────┘
          ┌──────────┼───────────┐
     ┌────▼────┐ ┌────▼────┐ ┌────▼────┐
     │   Dog   │ │   Cat   │ │  Cow    │
     └─────────┘ └─────────┘ └─────────┘
   (Multiple classes inherit from Animal)

────────────────────────────────────────────

🔴 Note: Java does NOT support Multiple Inheritance with classes
          (to avoid ambiguity, like the "Diamond Problem").
          Multiple Inheritance using Interfaces (✔️)

✅ But Java supports Multiple Inheritance using **Interfaces**.





                    📘 TYPES OF INHERITANCE IN JAVA

                                [INHERITANCE]
                                      |
     -----------------------------------------------------------------
     |                 |                   |                         |
[SINGLE]         [MULTILEVEL]       [HIERARCHICAL]       [MULTIPLE - via INTERFACES]
     |                 |                   |                         |
Class A           Class A             Class A              interface A     interface B
   |                  |                   |                         \         /
Class B           Class B             Class B                       Class C
                  |                   |
               Class C            Class C





| Inheritance Type      | Supported in Java? | How?                                     |
| --------------------- | ------------------ | ---------------------------------------- |
| Single                | ✅                  | `class B extends A`                      |
| Multilevel            | ✅                  | `class C extends B extends A`            |
| Hierarchical          | ✅                  | `class B extends A`, `class C extends A` |
| Multiple (Classes)    | ❌                  | Not supported                            |
| Multiple (Interfaces) | ✅                  | `class D implements A, B`                |













.........................................................................................................................................
Polymorphism in Java
Polymorphism means "many forms." It is one of the core concepts of Object-Oriented Programming that allows methods or objects to behave differently based on the context.

In Java, polymorphism enables a single method or object to take multiple forms, making programs more flexible and extensible.

Types of Polymorphism:
Compile-Time Polymorphism (Method Overloading):
This occurs when multiple methods have the same name but differ in the number, type, or sequence of parameters within the same class. The method to be executed is determined at compile time.

Runtime Polymorphism (Method Overriding):
This occurs when a subclass provides a specific implementation of a method that is already defined in its superclass. The method to be executed is decided at runtime based on the object being referred to, enabling dynamic method dispatch.




..................................................................................................................................................
A package (like library in cpp )in Java is a namespace that organizes a set of related classes and interfaces. Conceptually, it’s like a folder or directory that groups related files together.
Built-in Packages: Provided by Java API (e.g., java.lang, java.util, java.io)

User-defined Packages: Created by programmers to organize their own classes.


............................................................................................................................................
✅ Abstraction in Java – Theory
Definition:
Abstraction is the process of hiding the internal implementation details and showing only the essential features of an object.

-hide unnacessary  think and show important think 
-use with the help of class and interface 

1   abstract class 
=Declared using the abstract keyword.

=Can have abstract methods (without body) and concrete methods (with body).

=Cannot be instantiated directly.

= can not make a object but make a constructor 


2 interface / multiple inheritance
= it is blueprint of a class
=An interface in Java is a blueprint of a class. It is used to achieve abstraction and multiple inheritance.
100% abstraction 

=use implement insted of extends
= use interface  instid of class 
= final public and static variable in interface 

..................................................................................................................................
**Static meyword **
| Feature        | Can Use Static? | Notes                          |
| -------------- | --------------- | ------------------------------ |
| Variable       | ✅ Yes           | Shared among all objects       |
| Method         | ✅ Yes           | Can't use `this` keyword       |
| Block          | ✅ Yes           | Executes once at class loading |
| Class (Nested) | ✅ Yes           | Only inner class can be static |
The static keyword is used for memory management. It means the member (variable or method) belongs to the class, not to objects.

it is use to share the same variable or method of a given class 
| Feature                | Benefit                                                             |
| ---------------------- | ------------------------------------------------------------------- |
| 🔹 **Static Variable** | Saves memory – only one copy shared by all objects                  |
| 🔹 **Static Method**   | Can be called without creating an object (fast & efficient)         |
| 🔹 **Static Block**    | Useful for initializing static variables during class loading       |
| 🔹 **Static Class**    | Helps logically group classes, especially in nested class scenarios |
..............................................................................................................................
super keyword 

It is used to access parent class members (variables, methods, or constructors) from a subclass.
Common uses:
Call parent class constructor.
Access parent class methods when overridden.
Access parent class variables if hidden by subclass variables.


,,,,,,,,,.....................................................................................................................

